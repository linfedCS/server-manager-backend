from psycopg_pool import ConnectionPool
from fastapi import HTTPException
from dotenv import load_dotenv

from core.config import get_settings

load_dotenv()
settings = get_settings()

pool = None


def init_pool():
    global pool
    pool = ConnectionPool(
        conninfo=f"""
            dbname={settings.db_name}
            user={settings.db_user}
            password={settings.db_pass}
            host={settings.db_host}
            port={settings.db_port}
        """,
        min_size=1,
        max_size=10,
    )

    # Создание таблиц
    with pool.connection() as conn:
        with conn.cursor() as cur:
            cur.execute(
                """
                CREATE TABLE IF NOT EXISTS servers(
                    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    name TEXT,
                    ip TEXT DEFAULT 'linfed.ru',
                    port INTEGER,
                    owner VARCHAR
                )
            """
            )
            cur.execute(
                """
                CREATE TABLE IF NOT EXISTS maps(
                    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    name TEXT NOT NULL,
                    map_id INTEGER NOT NULL
                )
            """
            )
            cur.execute(
                """
                CREATE TABLE IF NOT EXISTS users(
                    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    username VARCHAR(20),
                    email VARCHAR(50) UNIQUE NOT NULL,
                    hashed_password VARCHAR(255) NOT NULL,
                    is_disable BOOLEAN DEFAULT TRUE,
                    is_verified BOOLEAN DEFAULT FALSE,
                    role VARCHAR DEFAULT 'user',
                    refresh_token VARCHAR,
                    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
                )
            """
            )
            cur.execute(
                """
                CREATE TABLE IF NOT EXISTS ports(
                    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    port INTEGER,
                    is_occupied BOOLEAN DEFAULT FALSE,
                    container_name TEXT,
                    occupied_at TIMESTAMPTZ DEFAULT NULL,
                    created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
                )
"""
            )
    print("Database pool initialized and tables created")


def close_pool():
    global pool
    if pool:
        pool.close()
        print("Database pool closed")


def get_db_connection():
    if not pool:
        raise HTTPException(status_code=500, detail="Database pool not initialized")
    return pool.connection()
